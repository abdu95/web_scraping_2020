# Clear memory
rm(list=ls())
# Call packages
install.packages('WDI')
library(WDI)
# How WDI works - it is an API
# Search for variables which contains GDP
a <- WDIsearch('gdp')
# Get data
gdp_data <- WDI(indicator='NY.GDP.PCAP.KD', country="all", start=2000, end=2000)
View(gdp_data)
View(gdp_data)
View(a)
a <- WDIsearch('population, total')
b <- WDIsearch('co2')
View(b)
# Get all the data - 2018 is the latest available data for life expectancy
data_raw <- WDI(indicator=c('NY.GDP.PCAP.KD','EN.ATM.CO2E.PC','SP.POP.TOTL'),
country="all", start=2000, end=2000)
View(data_raw)
# Get all the data - 2018 is the latest available data for life expectancy
data_raw <- WDI(indicator=c('NY.GDP.PCAP.KD','EN.ATM.CO2E.PC'),
country="all", start=2000, end=2000)
View(data_raw)
# Save the raw data file
my_path <- "D:\CEU\1 semester\coding_1_data-management-and-analysis_with_r\ECBS-5208-Coding-1-Business-Analytics\Class_9/"
# Save the raw data file
my_path <- "D:/CEU/1 semester/coding_1_data-management-and-analysis_with_r/ECBS-5208-Coding-1-Business-Analytics/Class_9/"
write_csv(data_raw, paste0(my_path,'raw/WDI_co2_raw.csv'))
library(readr)
write_csv(data_raw, paste0(my_path,'raw/WDI_co2_raw.csv'))
write_csv(data_raw, paste0(my_path,'raw/WDI_co2_raw.csv'))
write_csv(data_raw, paste0(my_path,'raw/WDI_co2_raw.csv'))
# Save the raw data file
my_path <- "D:/CEU/1 semester/coding_1_data-management-and-analysis_with_r/ECBS-5208-Coding-1-Business-Analytics/Class_9/data"
write_csv(data_raw, paste0(my_path,'raw/WDI_co2_raw.csv'))
write_csv(data_raw, paste0(my_path,'raw/WDI_co2_raw.csv'))
# Save the raw data file
my_path <- "D:/CEU/1 semester/coding_1_data-management-and-analysis_with_r/ECBS-5208-Coding-1-Business-Analytics/Class_9/data/"
write_csv(data_raw, paste0(my_path,'raw/WDI_co2_raw.csv'))
View(data_raw)
View(data_raw)
library(tidyverse)
file_path <- "D:/CEU/1 semester/coding_1_data-management-and-analysis_with_r/ECBS-5208-Coding-1-Business-Analytics/Class_9/data/raw/WDI_co2_raw.csv"
df <- read_csv(file_path)
View(df)
d1 <- df %>% filter(grepl("[[:digit:]]", df$iso2c))
View(d1)
df <- df %>% filter( !grepl("[[:digit:]]", df$iso2c) )
View(df)
drop_id <- c("EU","HK","OE")
# Check for filtering
df %>% filter( grepl( paste( drop_id , collapse="|"), df$iso2c ) )
View(df)
drop_id
df <- read_csv(file_path)
df <- df %>% filter( !grepl("[[:digit:]]", df$iso2c) )
drop_id <- c("EU","HK","OE")
# Check for filtering
df %>% filter( grepl( paste( drop_id , collapse="|"), df$iso2c ) )
# Save the opposite
df <- df %>% filter( !grepl( paste( drop_id , collapse="|"), df$iso2c ) )
View(d1)
fl_iso2c <- substr(df$iso2c, 1, 1)
retain_id <- c("XK","ZA","ZM","ZW")
# Check
d1 <- df %>% filter( grepl( "X", fl_iso2c ) | grepl( "Z", fl_iso2c ) &
!grepl( paste( retain_id , collapse="|"), df$iso2c ) )
# Save observations which are the opposite (use of !)
df <- df %>% filter( !( grepl( "X", fl_iso2c ) | grepl( "Z", fl_iso2c ) &
!grepl( paste( retain_id , collapse="|"), df$iso2c ) ) )
rm( d1 , drop_id, fl_iso2c , retain_id )
View(b)
m <- df %>% filter( !complete.cases( df ) )
View(m)
View(df)
df <- df %>% filter( complete.cases( df ) | is.na( df$iso2c ) )
# Clear memory
rm(list=ls())
gdp_data <- WDI(indicator='NY.GDP.PCAP.KD', country="all", start=2000, end=2000)
# Get all the data - 2018 is the latest available data for life expectancy
data_raw <- WDI(indicator=c('NY.GDP.PCAP.KD','EN.ATM.CO2E.PC'),
country="all", start=2000, end=2000)
# Save the raw data file
my_path <- "D:/CEU/1 semester/coding_1_data-management-and-analysis_with_r/ECBS-5208-Coding-1-Business-Analytics/Class_9/data/"
write_csv(data_raw, paste0(my_path,'raw/WDI_co2_raw.csv'))
rm(list=ls())
file_path <- "D:/CEU/1 semester/coding_1_data-management-and-analysis_with_r/ECBS-5208-Coding-1-Business-Analytics/Class_9/data/raw/WDI_co2_raw.csv"
df <- read_csv(file_path)
df <- df %>% filter( !grepl("[[:digit:]]", df$iso2c) )
drop_id <- c("EU","HK","OE")
# Check for filtering
df %>% filter( grepl( paste( drop_id , collapse="|"), df$iso2c ) )
# Save the opposite
df <- df %>% filter( !grepl( paste( drop_id , collapse="|"), df$iso2c ) )
fl_iso2c <- substr(df$iso2c, 1, 1)
retain_id <- c("XK","ZA","ZM","ZW")
# Check
d1 <- df %>% filter( grepl( "X", fl_iso2c ) | grepl( "Z", fl_iso2c ) &
!grepl( paste( retain_id , collapse="|"), df$iso2c ) )
# Save observations which are the opposite (use of !)
df <- df %>% filter( !( grepl( "X", fl_iso2c ) | grepl( "Z", fl_iso2c ) &
!grepl( paste( retain_id , collapse="|"), df$iso2c ) ) )
rm( d1 , drop_id, fl_iso2c , retain_id )
m <- df %>% filter( !complete.cases( df ) )
View(m)
df <- df %>% filter( complete.cases( df ) | is.na( df$iso2c ) )
View(df)
df <-df %>% transmute( country = country,
gdppc=NY.GDP.PCAP.PP.KD/1000,
co2emission= EN.ATM.CO2E.PC)
df <-df %>% transmute( country = country,
gdppc=NY.GDP.PCAP.KD/1000,
co2emission= EN.ATM.CO2E.PC)
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~key, scales = "free") +
geom_histogram()
# Clear memory
rm(list=ls())
gdp_data <- WDI(indicator='NY.GDP.PCAP.KD', country="all", start=2000, end=2000)
# Get all the data - 2018 is the latest available data for life expectancy
data_raw <- WDI(indicator=c('NY.GDP.PCAP.KD','EN.ATM.CO2E.PC', 'SP.POP.TOTL'),
country="all", start=2000, end=2000)
View(data_raw)
# Save the raw data file
my_path <- "D:/CEU/1 semester/coding_1_data-management-and-analysis_with_r/ECBS-5208-Coding-1-Business-Analytics/Class_9/data/"
write_csv(data_raw, paste0(my_path,'raw/WDI_co2_raw.csv'))
rm(list=ls())
file_path <- "D:/CEU/1 semester/coding_1_data-management-and-analysis_with_r/ECBS-5208-Coding-1-Business-Analytics/Class_9/data/raw/WDI_co2_raw.csv"
df <- read_csv(file_path)
df <- df %>% filter( !grepl("[[:digit:]]", df$iso2c) )
drop_id <- c("EU","HK","OE")
# Check for filtering
df %>% filter( grepl( paste( drop_id , collapse="|"), df$iso2c ) )
# Save the opposite
df <- df %>% filter( !grepl( paste( drop_id , collapse="|"), df$iso2c ) )
fl_iso2c <- substr(df$iso2c, 1, 1)
retain_id <- c("XK","ZA","ZM","ZW")
# Check
d1 <- df %>% filter( grepl( "X", fl_iso2c ) | grepl( "Z", fl_iso2c ) &
!grepl( paste( retain_id , collapse="|"), df$iso2c ) )
# Save observations which are the opposite (use of !)
df <- df %>% filter( !( grepl( "X", fl_iso2c ) | grepl( "Z", fl_iso2c ) &
!grepl( paste( retain_id , collapse="|"), df$iso2c ) ) )
rm( d1 , drop_id, fl_iso2c , retain_id )
m <- df %>% filter( !complete.cases( df ) )
df <- df %>% filter( complete.cases( df ) | is.na( df$iso2c ) )
df <-df %>% transmute( country = country,
population=SP.POP.TOTL/1000000,
gdppc=NY.GDP.PCAP.KD/1000,
co2emission= EN.ATM.CO2E.PC)
View(df)
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~key, scales = "free") +
geom_histogram()
View(df)
df %>% filter( population > 500 )
summary( df )
path_to_save <- "D:/CEU/1 semester/coding_1_data-management-and-analysis_with_r/ECBS-5208-Coding-1-Business-Analytics/Class_9/data"
write_csv( df, paste0(path_to_save,'clean/WDI_co2_clean.csv'))
path_to_save <- "D:/CEU/1 semester/coding_1_data-management-and-analysis_with_r/ECBS-5208-Coding-1-Business-Analytics/Class_9/data/"
write_csv( df, paste0(path_to_save,'clean/WDI_co2_clean.csv'))
# Packages to use
library(tidyverse)
# For scaling ggplots
require(scales)
# Estimate piecewise linear splines
install.packages("lspline")
library(lspline)
# Estimate robust SE
install.packages("estimatr")
# Compare models with robust SE
install.packages("texreg")
library(texreg)
# For different themes
install.packages(ggthemes)
install.packages("ggthemes")
library(ggthemes)
clean_file <- "Documents/Egyetem/CEU/Teaching_2020/Coding_with_R/git_coding_1/ECBS-5208-Coding-1-Business-Analytics/Class_8/data/clean/WDI_lifeexp_clean.csv"
df <- read_csv(clean_file)
clean_file <- "D:/CEU/1 semester/coding_1_data-management-and-analysis_with_r/ECBS-5208-Coding-1-Business-Analytics/Class_9/data/clean/WDI_lifeexp_clean.csv"
df <- read_csv(clean_file)
clean_file <- "D:/CEU/1 semester/coding_1_data-management-and-analysis_with_r/ECBS-5208-Coding-1-Business-Analytics/Class_9/data/clean/WDI_co2_clean.csv"
df <- read_csv(clean_file)
df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~key, scales = "free") +
geom_histogram()+
theme_wsj() +
scale_fill_wsj()
summary( df )
df <- df %>% mutate( gdptot = gdppc*population )
View(df)
# 1) co2 - gdptot: level-level model without scaling
ggplot( df , aes(x = gdptot, y = co2emission)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Total GDP (2000 int. const. $, PPP )",y = "CO2 emission (years)")
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = gdptot, y = co2emission)) +
geom_point() +
geom_smooth(method="loess") +
labs(x = "Total GDP (2000 int. const. $, PPP, ln scale )",y = "CO2 emission (years)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
# You can change the scale for Total GDP and life-expectancy for checking log-transformation
ggplot( df , aes(x = gdptot, y = co2emission)) +
geom_point() +
geom_smooth(method="loess") +
labs(x = "Total GDP (2000 int. const. $, PPP, ln scale )",y = "CO2 emission (years, ln scale)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) ) +
scale_y_continuous( trans = log_trans() )
# 2) lifeexp - gdppc: level-level model without scaling
ggplot( df , aes(x = gdppc, y = co2emission)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "GDP/capita (2018 int. const. $, PPP )",y = "CO2 emission  (years)")
# 1) co2 - gdptot: level-level model without scaling
ggplot( df , aes(x = gdptot, y = co2emission)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Total GDP (2000 int. const. $, PPP )",y = "CO2 emission (years)")
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = gdptot, y = co2emission)) +
geom_point() +
geom_smooth(method="loess") +
labs(x = "Total GDP (2000 int. const. $, PPP, ln scale )",y = "CO2 emission (years)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
# You can change the scale for Total GDP and life-expectancy for checking log-transformation
ggplot( df , aes(x = gdptot, y = co2emission)) +
geom_point() +
geom_smooth(method="loess") +
labs(x = "Total GDP (2000 int. const. $, PPP, ln scale )",y = "CO2 emission (years, ln scale)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) ) +
scale_y_continuous( trans = log_trans() )
# You can change the scale for GDP/capita for checking log-transformation
ggplot( df , aes(x = gdppc, y = co2emission)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "GDP/capita (2000 int. const. $, PPP , ln scale )",y = "CO2 emission (years)") +
scale_x_continuous( trans = log_trans(), breaks = seq(0, 120, by = 20))
# You can change the scale for GDP/capita and life-expectancy for checking log-transformation
ggplot( df , aes(x = gdppc, y = co2emission ))  +
geom_point() +
geom_smooth(method="loess")+
labs(x = "GDP/capita (2000 int. const. $, PPP , ln scale )",y = "CO2 emission (years, ln scale)") +
scale_x_continuous( trans = log_trans(), breaks = seq(0, 120, by = 20))+
scale_y_continuous( trans = log_trans() )
View(df)
#Looking better: parabola, convex, reverted
# Ati: This has better than simple linear regression
# Cool: Ati had HTML Conclusion table like Agoston did last time
# You can change the scale for GDP/capita and life-expectancy for checking log-transformation
ggplot( df , aes(x = gdppc, y = co2emission ))  +
geom_point() +
geom_smooth(method="loess")+
labs(x = "GDP/capita (2000 int. const. $, PPP , ln scale )",y = "CO2 emission (years, ln scale)") +
scale_x_continuous( trans = log_trans(), breaks = seq(0, 120, by = 20))+
scale_y_continuous( trans = log_trans() )
knit_with_parameters('D:/CEU/1 semester/data-analysis-2/da2-assignment_1/codes/Markdown.Rmd')
library(rvest)
library(data.table)
library(jsontitle)
library(jsonlite)
getwd()
setwd("D:/CEU/1 semester/web-scraping-R/web_scraping_2020")
rm(df)
rm(m)
rm(clean_file)
rm(file_path)
rm(path_to_save)
# opened html
# got text
# got JSON that is embedded in HTML
# we work
t <- read_html('https://www.imdb.com/title/tt0800369/')
write_html(t, 't.html')
# without xpath it will select as css (with xpath it will select as XML?)
df %>% fromJSON(t %>% html_node(xpath = '//script[@type="application/ld+json"]') %>% html_text())
# without xpath it will select as css (with xpath it will select as XML?)
df <- fromJSON(t %>% html_node(xpath = '//script[@type="application/ld+json"]') %>% html_text())
View(df)
View(df)
p <- read_html('https://www.payscale.com/research/US/Job=Data_Scientist/Salary')
write_html(p, 'payscale.html')
pay_df <- fromJSON(p %>% html_node(xpath = '//script[@type="application/ld+json"]') %>% html_text())
View(pay_df)
toJSON(salary_list, auto_unbox = T)
toJSON(pay_df, auto_unbox = T)
toJSON(pay_df, auto_unbox = F)
# ldjson and json: difference is ID.
pay_df <- fromJSON(p %>% html_node(xpath = '//script[@type="application/json"]') %>% html_text())
toJSON(pay_df, auto_unbox = F)
toJSON(pay_df, auto_unbox = T)
tdf <- pay_df$props$pageProps$pageData$byDimension$`Job by Location`$rows
View(tdf)
View(tdf)
View(pay_df)
what <- pay_df$props
what <- pay_df$props$pageProps
what <- pay_df$props$pageProps$pageData
#
what <- pay_df$props$pageProps$pageData$byDimension
#
what <- pay_df$props$pageProps$pageData$byDimension$`Job by Location`
require(httr)
headers = c(
`Connection` = 'keep-alive',
`Accept` = 'application/json, text/plain, */*',
`User-Agent` = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36',
`Content-Type` = 'application/x-www-form-urlencoded',
`Origin` = 'https://www.palyazat.gov.hu',
`Sec-Fetch-Site` = 'same-site',
`Sec-Fetch-Mode` = 'cors',
`Sec-Fetch-Dest` = 'empty',
`Referer` = 'https://www.palyazat.gov.hu/',
`Accept-Language` = 'en-US,en;q=0.9,uz;q=0.8,ru;q=0.7,tg;q=0.6'
)
data = list(
`filter` = '{"where":{"fejlesztesi_program_nev":"Sz\xE9chenyi 2020"},"skip":"0","limit":10,"order":"konstrukcio_kod, palyazo_neve ASC"}'
)
res <- httr::POST(url = 'https://pghrest.fair.gov.hu/api/tamogatott_proj_kereso/find2', httr::add_headers(.headers=headers), body = data)
new_tdf <- fromJSON(content(res, 'text'))
View(new_tdf)
